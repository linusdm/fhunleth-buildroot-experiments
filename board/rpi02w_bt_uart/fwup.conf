# Firmware configuration file for the Raspberry Pi Zero 2W

# Default paths if not specified via the commandline
define(ROOTFS, "${BINARIES_DIR}/rootfs.squashfs")

# This configuration file will create an image that
# has an MBR and the following 3 partitions:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | p1: Boot partition (FAT32) |
# | zImage, bootcode.bin,      |
# | config.txt, etc.           |
# +----------------------------+
#
# The image is sized to be less than 1 GB so that it fits on
# nearly any SDCard around. If you have a larger SDCard and
# need more space, feel free to bump the partition sizes
# below.

# The Raspberry Pi is incredibly picky on the partition sizes
# and in ways that I don't understand. Test changes one at a
# time to make sure that they boot. (Sizes are in 512 byte
# blocks)
define(BOOT_PART_OFFSET, 63)
define(BOOT_PART_COUNT, 77261)

# Firmware metadata
meta-product = "Raspberry Pi Zero 2W BT to UART"
meta-description = ""
meta-version = "0.0.1"
meta-platform = "rpi02w"
meta-architecture = "arm"
meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource bootcode.bin {
    host-path = "${BINARIES_DIR}/rpi-firmware/bootcode.bin"
}
file-resource fixup.dat {
    host-path = "${BINARIES_DIR}/rpi-firmware/fixup.dat"
}
file-resource start.elf {
    host-path = "${BINARIES_DIR}/rpi-firmware/start.elf"
}
file-resource config.txt {
    host-path = "${BR2_EXTERNAL_FHUNLETH_PATH}/board/rpi02w_bt_uart/config.txt"
}
file-resource cmdline.txt {
    host-path = "${BR2_EXTERNAL_FHUNLETH_PATH}/board/rpi02w_bt_uart/cmdline.txt"
}
file-resource zImage {
    host-path = "${BINARIES_DIR}/zImage"
}
file-resource bcm2710-rpi-zero-2-w.dtb {
    host-path = "${BINARIES_DIR}/bcm2710-rpi-zero-2-w.dtb"
}
file-resource dwc2.dtbo {
    host-path = "${BINARIES_DIR}/rpi-firmware/overlays/dwc2.dtbo"
}

mbr mbr {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    # partition 1 is unused
    # partition 2 is unused
    # partition 3 is unused
}

# This firmware task writes everything to the destination media
task complete {
    on-init {
        mbr_write(mbr)

        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
        fat_setlabel(${BOOT_PART_OFFSET}, "BOOT")
        fat_mkdir(${BOOT_PART_OFFSET}, "overlays")
    }

    on-resource config.txt { fat_write(${BOOT_PART_OFFSET}, "config.txt") }
    on-resource cmdline.txt { fat_write(${BOOT_PART_OFFSET}, "cmdline.txt") }
    on-resource bootcode.bin { fat_write(${BOOT_PART_OFFSET}, "bootcode.bin") }
    on-resource start.elf { fat_write(${BOOT_PART_OFFSET}, "start.elf") }
    on-resource fixup.dat { fat_write(${BOOT_PART_OFFSET}, "fixup.dat") }
    on-resource zImage { fat_write(${BOOT_PART_OFFSET}, "zImage") }
    on-resource bcm2710-rpi-zero-2-w.dtb { fat_write(${BOOT_PART_OFFSET}, "bcm2710-rpi-zero-2-w.dtb") }
    on-resource dwc2.dtbo { fat_write(${BOOT_PART_OFFSET}, "overlays/dwc2.dtbo") }
}

